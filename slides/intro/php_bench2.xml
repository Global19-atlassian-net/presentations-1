<slide title="Benchmarking Results">

<example type="shell" title="An http_load run" fontsize="1.5em">
2500 fetches, 5 max parallel, 1.962e+07 bytes, in 15.9486 seconds
7848 mean bytes/connection
156.753 fetches/sec, 1.2302e+06 bytes/sec
msecs/connect: 1.40331 mean, 2999.44 max, 0.171 min
msecs/first-response: 29.4603 mean, 648.731 max, 6.005 min
HTTP response codes:
  code 200 -- 2500
</example>

<blurb>Whenever you do any sort of load testing, you need look beyond just the
raw numbers and have a look at what your server is actually doing.  Use %vmstat%:
</blurb>

<example type="shell" title="Base PHP Load" fontsize="1.5em" marginleft="0em" marginright="0em">
 procs      memory      page                    disks     faults      cpu
 r b w     avm    fre  flt  re  pi  po  fr  sr ad0 ac0   in   sy  cs us sy id
25 0 0  149472  17572   26   0   0   0   0   0   0   0 1663 12390 4391 80 20  0
 5 0 0  149472  17532   27   0   0   0   0   0   0   0 1665 12322 4444 77 23  0
 7 0 0  149472  17492   24   0   0   0   0   0   2   0 1657 12409 4771 74 26  0
 5 0 0  149472  17452   28   0   0   0   0   0   0   0 1687 12520 4856 82 18  0
25 0 0  149472  17412   28   0   0   0   0   0   0   0 1649 12413 4756 78 22  0
 5 0 0  149472  17372   23   0   0   0   0   0   0   0 1645 12199 4417 77 23  0
 5 0 0  149084  17332   27   0   0   0   0   0   1   0 1679 12564 4385 76 24  0
 5 0 0  149464  17304   26   0   0   0   3   0   1   0 1663 12336 4551 79 21  0
 5 0 0  149464  17264   27   0   0   0   0   0   0   0 1662 12480 4663 82 18  0
</example>

<example type="shell" title="Load with APC cache" fontsize="1.5em" marginleft="0em" marginright="0em">
 procs      memory      page                    disks     faults      cpu
 r b w     avm    fre  flt  re  pi  po  fr  sr ad0 ac0   in   sy  cs us sy id
 5 0 0  150140  11936   29   0   0   0   0   0   0   0 1629 12203 4687 75 25  0
 5 0 0  150140  11888   28   0   0   0   0   0   0   0 1619 12007 4579 79 21  0
 5 0 0  150140  11848   28   0   0   0   0   0   0   0 1640 12305 4252 76 24  0
 5 0 0  150140  11808   25   0   0   0   0   0   1   0 1630 12006 4628 84 16  0
25 0 0  150140  11776   27   0   0   0   0   0   0   0 1635 12304 4118 88 12  0
 5 0 0  150140  11736   26   0   0   0   0   0   0   0 1627 12059 4381 80 20  0
 5 0 0  150528  11696   22   0   0   0   0   0  11   0 1635 12178 4685 83 17  0
 5 0 0  150528  11656   26   0   0   0   0   0   0   0 1624 12027 4651 84 16  0
</example>

<example type="shell" title="Load with IonCube cache" fontsize="1.5em" marginleft="0em" marginright="0em">
 procs      memory      page                    disks     faults      cpu
 r b w     avm    fre  flt  re  pi  po  fr  sr ad0 ac0   in   sy  cs us sy id
 5 0 0  127996  14516   28   0   0   0   0   0   0   0 1608 19343 4382 77 23  0
 5 0 0  127996  14476   25   0   0   0   0   0   0   0 1601 19416 4628 82 18  0
 8 0 0  127616  14436   23   0   0   0   0   0   1   0 1600 19181 4604 76 24  0
26 0 0  127616  14400   24   0   0   0   1   0   1   0 1605 19439 3940 84 16  0
 5 0 0  127616  14360   26   0   0   0   0   0   0   0 1612 19416 4582 79 21  0
 5 0 0  128956  14328   25   0   0   0   0   0   1   0 1599 19336 4559 72 28  0
 6 0 0  128956  14288   26   0   0   0   0   0   0   0 1598 19390 4444 79 21  0
</example>

<example type="shell" title="Load with Turck MMCache" fontsize="1.5em" marginleft="0em" marginright="0em">
 procs      memory      page                    disks     faults      cpu
 r b w     avm    fre  flt  re  pi  po  fr  sr ad0 ac0   in   sy  cs us sy id
 3 0 0  136696  13284   29   0   0   0   0   0   0   0 1694 14846 4748 79 21  0
 5 0 0  136696  13244   33   0   0   0   0   0   1   0 1711 14815 4472 74 26  0
 5 0 0  136308  13204   28   0   0   0   0   0   0   0 1696 14824 4771 83 17  1
 5 0 0  136688  13164   27   0   0   0   0   0   0   0 1692 14590 4880 83 17  0
 6 0 0  136688  13116   26   0   0   0   0   0   1   0 1687 14762 4010 83 17  0
 5 0 0  135696  13004   25   0   0   0   0   0   0   0 1693 14759 4840 79 21  0
 7 0 0  135696  12956   26   0   0   0   0   0   1   0 1676 14477 4643 74 25  1
</example>

<blurb>
Our benchmark test was deliberately designed to have quite a bit of PHP processing
and not a whole lot of output.  7k is somewhat small for a web page.  If instead
we have a whole lot of output, chances are we will be io-bound instead of cpu-bound.
If you are io-bound, there is little sense in optimizing at the PHP level.
</blurb>

<example type="shell" title="Evidence of an io-bound test" fontsize="1.5em" marginleft="0em" marginright="0em">
 procs      memory      page                    disks     faults      cpu
 r b w     avm    fre  flt  re  pi  po  fr  sr ad0 ac0   in   sy  cs us sy id
 4 0 0  132860  15724 1033   0   0   0   0   0   0   0 4457  954 3704  2 25 74
 5 0 0  132860  15724 1009   0   0   0   0   0   0   0 4436  714 3597  3 24 73
 6 0 0  132860  15716  980   0   0   0   0   0   0   0 4446  925 3603  5 23 72
 2 0 0  132860  15716 1028   0   0   0   0   0   6   0 4514  720 3696  2 24 73
 3 0 0  132472  15716 1018   0   0   0   0   0   2   0 4501  946 3673  2 22 76
 4 0 0  132472  15716 1039   0   0   0   0   0   0   0 4565  737 3718  2 26 73
 3 0 0  132472  15708 1010   0   0   0   0   0   2   0 4498  938 3639  2 24 75
 2 0 0  132472  15708 1012   0   0   0   0   0   0   0 4543  730 3665  5 25 70
</example>

<example type="shell" title="Things to try if you are io-bound">
[php.ini]
output_handler = ob_gzhandler
</example>

<example type="shell">
[httpd.conf]
LoadModule gzip_module lib/apache/mod_gzip.so
</example>

</slide>
