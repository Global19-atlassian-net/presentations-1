<slide title="PHP 5.3">

<break lines="1" />

<example fontsize="1.4em" result='0' title="Defining a namespace"><![CDATA[<?php
// foo.php
namespace foo;

class bar {
  function __construct() {
    echo get_called_class();
  }
}
?>]]></example>

<example fontsize="1.4em" result='0' title="Using namespaced code"><![CDATA[<?php
require './foo.php';
use foo\bar as b;
$a = new b;
?>]]></example>

<example fontsize="1.4em" hide="1" result='1' title="Output"><![CDATA[foo\bar]]></example>

<example fontsize="1.4em" result='1' title="NOWDOC"><![CDATA[<?php
echo <<< 'EOB'
NOWDOC is to HEREDOC as single quoted $trings are\n
to double quoted $trings in PHP.
EOB;
?>]]></example>

<example fontsize="1.4em" result='1' title="?:"><![CDATA[<?php
echo true ?: 'Hello';
echo false ?: 'World';
?>]]></example>

<example fontsize="1.4em" result='0' title="goto"><![CDATA[<?php
function foo() {
   for($i=0, $j=1; $i<10; $i++) {
       while($j++) {
           if($j == 5) {
               goto end;
           }
       }
   }
end:
   // run cleanup code
}
?>]]></example>

<example fontsize="1.4em" result="0" title="get_called_class"><![CDATA[<?php
abstract class Singleton {
    private static $instances = array();
    final public static function getInstance() {
        $className = get_called_class();
        if(!isset(self::$instances[$className])) {
            self::$instances[$className] = new $className();
        }
        return self::$instances[$className];
    }
}

class foo extends Singleton { }
class bar extends Singleton { }

$a = foo::getInstance();
$b = foo::getInstance();
$c = bar::getInstance();
?>]]></example>

<example fontsize="1.4em" result="1" title="DateInterval/DatePeriod"><![CDATA[<?php
$db = new DateTime( '2008-12-31' );
$de = new DateTime( '2009-12-31' );
$di = DateInterval::createFromDateString('third tuesday of next month');
$dp = new DatePeriod($db, $di, $de, DatePeriod::EXCLUDE_START_DATE);
foreach($dp as $dt) {
   echo $dt->format( "F jS\n" ) . "<br>\n";
}
?>]]></example>

</slide>
