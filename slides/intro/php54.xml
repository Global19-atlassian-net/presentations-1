<slide title="PHP 5.4">

<break lines="1" />
<blurb fontsize="4em">Broad Performance Improvements</blurb>
<list>
<item>FastCGI request handling</item>
<item>better memory handling</item>
<item>startup/shutdown</item>
<item>repeated run-time function binding</item>
<item>string constants</item>
<item>access to global constants</item>
<item>access to static properties</item>
<item>empty hashes</item>
<item>@ operator</item>
<item>unserialize()</item>
</list>

<break lines="1" />
<blurb fontsize="4em">Traits aka Horizontal Code Reuse</blurb>
<blurb fontsize="4em">(Compiler-assisted Copy-and-Paste)</blurb>
<example fontsize="2em" result='0' title=""><![CDATA[<?php
trait Singleton {
    public static function getInstance() { ... }
}

class A {
    use Singleton;
    // ...
}

class B extends ArrayObject {
    use Singleton;
    // ...
}

// Singleton method is now available for both classes
A::getInstance();
B::getInstance();
?>]]></example>


<break lines="1" />
<blurb fontsize="4em">Function Array Dereferencing</blurb>
<example fontsize="2em" result='0' title=""><![CDATA[<?php
function fruits() {
  return array('apple', 'banana', 'orange');
}
echo fruits()[0]; // Outputs: apple
?>]]></example>

<break lines="1" />
<blurb fontsize="4em">$this from current scope supported in Closures</blurb>
<example fontsize="2em" result='0' title=""><![CDATA[<?php
class Foo {
  private $prop = "bar";
  public function getPrinter() {
    return function() { echo ucfirst($this->prop); };
  }
}

$a = new Foo;
$func = $a->getPrinter();
$func(); // Outputs: Bar
?>]]></example>

<break lines="1" />
<blurb fontsize="4em">New Output API (internal code cleanup)</blurb>

<break lines="1" />
<blurb fontsize="4em">&amp;lt;?= is now always available</blurb>

<break lines="1" />
<blurb fontsize="4em">default charset is UTF-8 instead of ISO-8859-1</blurb>

<break lines="1" />
<blurb fontsize="4em">Multibyte support is now configurable at runtime</blurb>

<break lines="1" />
<blurb fontsize="4em">JSON Improvements:</blurb>
<list><item>JsonSerializable</item></list>
<example fontsize="2em" result='0' title=""><![CDATA[<?php
class Foo implements JsonSerializable {
    private $data = 'Bar';
    public function jsonSerialize() {
        return array('data'=>$this->data);
    }
}
echo json_encode(new Foo); // Outputs: {"data":"Bar"}
?>]]></example>

<list><item>JSON Pretty Printer</item></list>
<example fontsize="2em" result='0' title=""><![CDATA[<?php
$a = array(1,2,3,array(4,5,6));
echo json_encode($a,JSON_PRETTY_PRINT);
?>]]></example>
<example fontsize="2em" result='0' title=""><![CDATA[
[
    1,
    2,
    3,
    [
        4,
        5,
        6
    ]
]
]]></example>

</slide>
